{"version":3,"sources":["../../../jsx/mact/dom.js"],"names":["synteticEvents","isSVG","createFragmentFrom","createElements","tagName","attrs","children","element","document","createElementNS","createElement","fragment","appendChild","Object","keys","forEach","prop","assign","style","ref","setAttribute","setAttributeNS","innerHTML","__html","includes","event","replace","toLowerCase","addEventListener","composeToFunction","JSXTag","elementProps","props","defaultProps","bridge","prototype","render","result","target","createComment","dom","console","error","tag","Fragment","portalCreator","node","Portal","body","nodeType","Node","ELEMENT_NODE"],"mappings":"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","sourcesContent":["import synteticEvents from './synteticEvents'\r\nimport { isSVG, createFragmentFrom } from './utils'\r\n\r\n/**\r\n * The tag name and create an html together with the attributes\r\n *\r\n * @param  {String} tagName name as string, e.g. 'div', 'span', 'svg'\r\n * @param  {Object} attrs html attributes e.g. data-, width, src\r\n * @param  {Array} children html nodes from inside de elements\r\n * @return {HTMLElement|SVGElement} html node with attrs\r\n */\r\nfunction createElements(tagName, attrs, children) {\r\n  const element = isSVG(tagName)\r\n    ? document.createElementNS('http://www.w3.org/2000/svg', tagName)\r\n    : document.createElement(tagName)\r\n\r\n  // one or multiple will be evaluated to append as string or HTMLElement\r\n  const fragment = createFragmentFrom(children)\r\n  element.appendChild(fragment)\r\n\r\n  Object.keys(attrs || {}).forEach(prop => {\r\n    if (prop === 'style') {\r\n      // e.g. origin: <element style={{ prop: value }} />\r\n      Object.assign(element.style, attrs[prop])\r\n    } else if (prop === 'ref' && typeof attrs.ref === 'function') {\r\n      attrs.ref(element, attrs)\r\n    } else if (prop === 'className') {\r\n      element.setAttribute('class', attrs[prop])\r\n    } else if (prop === 'htmlFor') {\r\n      element.setAttribute('for', attrs[prop])\r\n    } else if (prop === 'xlinkHref') {\r\n      element.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', attrs[prop])\r\n    } else if (prop === 'dangerouslySetInnerHTML') {\r\n      // eslint-disable-next-line no-underscore-dangle\r\n      element.innerHTML = attrs[prop].__html\r\n    } else if (synteticEvents.includes(prop)) {\r\n      const event = prop.replace(/^on/, '').toLowerCase()\r\n      element.addEventListener(event, attrs[prop])\r\n    } else {\r\n      // any other prop will be set as attribute\r\n      element.setAttribute(prop, attrs[prop])\r\n    }\r\n  })\r\n\r\n  return element\r\n}\r\n\r\n/**\r\n * The JSXTag will be unwrapped returning the html\r\n *\r\n * @param  {Function} JSXTag name as string, e.g. 'div', 'span', 'svg'\r\n * @param  {Object} elementProps custom jsx attributes e.g. fn, strings\r\n * @param  {Array} children html nodes from inside de elements\r\n *\r\n * @return {Function} returns de 'dom' (fn) executed, leaving the HTMLElement\r\n *\r\n * JSXTag:  function Comp(props) {\r\n *   return dom(\"span\", null, props.num);\r\n * }\r\n */\r\nfunction composeToFunction(JSXTag, elementProps, children) {\r\n  const props = Object.assign({}, JSXTag.defaultProps || {}, elementProps, { children })\r\n  const bridge = JSXTag.prototype.render ? new JSXTag(props).render : JSXTag\r\n  const result = bridge(props)\r\n\r\n  switch (result) {\r\n    case 'FRAGMENT':\r\n      return createFragmentFrom(children)\r\n\r\n    // Portals are useful to render modals\r\n    // allow render on a different element than the parent of the chain\r\n    // and leave a comment instead\r\n    case 'PORTAL':\r\n      bridge.target.appendChild(createFragmentFrom(children))\r\n      return document.createComment('Portal Used')\r\n    default:\r\n      return result\r\n  }\r\n}\r\n\r\nfunction dom(element, attrs, ...children) {\r\n  // Custom Components will be functions\r\n  if (typeof element === 'function') {\r\n    // e.g. const CustomTag = ({ w }) => <span width={w} />\r\n    // will be used\r\n    // e.g. <CustomTag w={1} />\r\n    // becomes: CustomTag({ w: 1})\r\n    return composeToFunction(element, attrs, children)\r\n  }\r\n\r\n  // regular html components will be strings to create the elements\r\n  // this is handled by the babel plugins\r\n  if (typeof element === 'string') {\r\n    return createElements(element, attrs, children)\r\n  }\r\n\r\n  return console.error(`jsx-render does not handle ${typeof tag}`)\r\n}\r\n\r\nexport default dom\r\nexport const Fragment = () => 'FRAGMENT'\r\nexport const portalCreator = node => {\r\n  function Portal() {\r\n    return 'PORTAL'\r\n  }\r\n\r\n  Portal.target = document.body\r\n\r\n  if (node && node.nodeType === Node.ELEMENT_NODE) {\r\n    Portal.target = node\r\n  }\r\n\r\n  return Portal\r\n}\r\n"],"file":"dom.js"}