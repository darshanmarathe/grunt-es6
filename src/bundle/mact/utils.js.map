{"version":3,"sources":["../../../jsx/mact/utils.js"],"names":["isSVG","element","patt","RegExp","SVGTags","some","tag","test","createFragmentFrom","children","fragment","document","createDocumentFragment","processDOMNodes","child","HTMLElement","SVGElement","Comment","DocumentFragment","appendChild","textnode","createTextNode","Array","forEach"],"mappings":"AAAA,OAAO,SAASA,KAAT,CAAeC,OAAf,EAAwB;AAC7B,QAAMC,IAAI,GAAG,IAAIC,MAAJ,CAAY,IAAGF,OAAQ,GAAvB,EAA2B,GAA3B,CAAb;AACA,QAAMG,OAAO,GAAG,CAAC,MAAD,EAAS,KAAT,EAAgB,KAAhB,EAAuB,GAAvB,CAAhB;AAEA,SAAOA,OAAO,CAACC,IAAR,CAAaC,GAAG,IAAIJ,IAAI,CAACK,IAAL,CAAUD,GAAV,CAApB,CAAP;AACD;AAED,OAAO,SAASE,kBAAT,CAA4BC,QAA5B,EAAsC;AAC3C;AACA,QAAMC,QAAQ,GAAGC,QAAQ,CAACC,sBAAT,EAAjB;;AAEA,WAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,QACEA,KAAK,YAAYC,WAAjB,IACAD,KAAK,YAAYE,UADjB,IAEAF,KAAK,YAAYG,OAFjB,IAGAH,KAAK,YAAYI,gBAJnB,EAKE;AACAR,MAAAA,QAAQ,CAACS,WAAT,CAAqBL,KAArB;AACD,KAPD,MAOO,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;AACjE,YAAMM,QAAQ,GAAGT,QAAQ,CAACU,cAAT,CAAwBP,KAAxB,CAAjB;AACAJ,MAAAA,QAAQ,CAACS,WAAT,CAAqBC,QAArB;AACD,KAHM,MAGA,IAAIN,KAAK,YAAYQ,KAArB,EAA4B;AACjCR,MAAAA,KAAK,CAACS,OAAN,CAAcV,eAAd;AACD,KAFM,MAEA,IAAIC,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,IAAjC,EAAuC,CAC5C;AACA;AACD,KAHM,MAGA,CACL;AACD;AACF;;AAEDL,EAAAA,QAAQ,CAACc,OAAT,CAAiBV,eAAjB;AAEA,SAAOH,QAAP;AACD","sourcesContent":["export function isSVG(element) {\r\n  const patt = new RegExp(`^${element}$`, 'i')\r\n  const SVGTags = ['path', 'svg', 'use', 'g']\r\n\r\n  return SVGTags.some(tag => patt.test(tag))\r\n}\r\n\r\nexport function createFragmentFrom(children) {\r\n  // fragments will help later to append multiple children to the initial node\r\n  const fragment = document.createDocumentFragment()\r\n\r\n  function processDOMNodes(child) {\r\n    if (\r\n      child instanceof HTMLElement ||\r\n      child instanceof SVGElement ||\r\n      child instanceof Comment ||\r\n      child instanceof DocumentFragment\r\n    ) {\r\n      fragment.appendChild(child)\r\n    } else if (typeof child === 'string' || typeof child === 'number') {\r\n      const textnode = document.createTextNode(child)\r\n      fragment.appendChild(textnode)\r\n    } else if (child instanceof Array) {\r\n      child.forEach(processDOMNodes)\r\n    } else if (child === false || child === null) {\r\n      // expression evaluated as false e.g. {false && <Elem />}\r\n      // expression evaluated as false e.g. {null && <Elem />}\r\n    } else {\r\n      // later other things could not be HTMLElement nor strings\r\n    }\r\n  }\r\n\r\n  children.forEach(processDOMNodes)\r\n\r\n  return fragment\r\n}\r\n"],"file":"utils.js"}