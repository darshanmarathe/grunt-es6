import { dom, Fragment } from "../mact/index.js";
import moment from "moment";
import { initState } from "./index"; // TodoInput Component

function parsestring(str) {
  var date = new Date();

  if (str.toLowerCase().indexOf("tomorrow") > -1) {
    date = moment().add(1, "days").toDate();
  }

  if (str.toLowerCase().indexOf("next week") > -1) {
    date = moment().add(1, "week").toDate();
  }

  if (str.toLowerCase().indexOf("next month") > -1) {
    date = moment().add(1, "month").toDate();
  }

  if (str.toLowerCase().indexOf("next year") > -1) {
    date = moment().add(1, "year").toDate();
  }

  {
    var dueDate = str.match(/\b(?:(?:Mon)|(?:Tues?)|(?:Wed(?:nes)?)|(?:Thur?s?)|(?:Fri)|(?:Sat(?:ur)?)|(?:Sun))(?:day)?\b[:\-,]?\s*(?:(?:jan|feb)?r?(?:uary)?|mar(?:ch)?|apr(?:il)?|may|june?|july?|aug(?:ust)?|oct(?:ober)?|(?:sept?|nov|dec)(?:ember)?)\s+\d{1,2}\s*,?\s*\d{4}/i);

    if (dueDate != null) {
      date = new Date(dueDate.toString());
    }
  }
  {
    var dueDate = str.match(/\w+(?=\s+days)/);

    if (dueDate != null && !isNaN(dueDate.toString())) {
      date = moment().add(parseInt(dueDate.toString()), "day").toDate();
    }
  }
  {
    var dueDate = str.match(/\w+(?=\s+weeks)/);

    if (dueDate != null && !isNaN(dueDate.toString())) {
      date = moment().add(parseInt(dueDate.toString()), "week").toDate();
    }
  }
  {
    var dueDate = str.match(/\w+(?=\s+months)/);

    if (dueDate != null && !isNaN(parseInt(dueDate.toString()))) {
      date = moment().add(parseInt(dueDate.toString()), "month").toDate();
    }
  }
  return {
    str,
    date
  };
}

const TodoInput = props => {
  return dom("input", {
    type: "text",
    style: {
      width: "100%"
    },
    onChange: e => {
      let {
        value
      } = e.target;
      initState.actions.HandleAdd(parsestring(value));
    },
    placeholder: props.placeholder
  });
};

export default TodoInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2pzeC90b2RvX2NvbXBvbmV0cy9Ub2RvSW5wdXQuanMiXSwibmFtZXMiOlsiZG9tIiwiRnJhZ21lbnQiLCJtb21lbnQiLCJpbml0U3RhdGUiLCJwYXJzZXN0cmluZyIsInN0ciIsImRhdGUiLCJEYXRlIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwiYWRkIiwidG9EYXRlIiwiZHVlRGF0ZSIsIm1hdGNoIiwidG9TdHJpbmciLCJpc05hTiIsInBhcnNlSW50IiwiVG9kb0lucHV0IiwicHJvcHMiLCJ3aWR0aCIsImUiLCJ2YWx1ZSIsInRhcmdldCIsImFjdGlvbnMiLCJIYW5kbGVBZGQiLCJwbGFjZWhvbGRlciJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsR0FBVCxFQUFjQyxRQUFkLFFBQThCLGtCQUE5QjtBQUVBLE9BQU9DLE1BQVAsTUFBbUIsUUFBbkI7QUFDQSxTQUFTQyxTQUFULFFBQTBCLFNBQTFCLEMsQ0FDQTs7QUFFQSxTQUFTQyxXQUFULENBQXFCQyxHQUFyQixFQUEwQjtBQUN0QixNQUFJQyxJQUFJLEdBQUcsSUFBSUMsSUFBSixFQUFYOztBQUNBLE1BQUlGLEdBQUcsQ0FBQ0csV0FBSixHQUFrQkMsT0FBbEIsQ0FBMEIsVUFBMUIsSUFBd0MsQ0FBQyxDQUE3QyxFQUFnRDtBQUM1Q0gsSUFBQUEsSUFBSSxHQUFHSixNQUFNLEdBQUdRLEdBQVQsQ0FBYSxDQUFiLEVBQWdCLE1BQWhCLEVBQXdCQyxNQUF4QixFQUFQO0FBQ0g7O0FBQ0QsTUFBSU4sR0FBRyxDQUFDRyxXQUFKLEdBQWtCQyxPQUFsQixDQUEwQixXQUExQixJQUF5QyxDQUFDLENBQTlDLEVBQWlEO0FBQzdDSCxJQUFBQSxJQUFJLEdBQUdKLE1BQU0sR0FBR1EsR0FBVCxDQUFhLENBQWIsRUFBZ0IsTUFBaEIsRUFBd0JDLE1BQXhCLEVBQVA7QUFDSDs7QUFDRCxNQUFJTixHQUFHLENBQUNHLFdBQUosR0FBa0JDLE9BQWxCLENBQTBCLFlBQTFCLElBQTBDLENBQUMsQ0FBL0MsRUFBa0Q7QUFDOUNILElBQUFBLElBQUksR0FBR0osTUFBTSxHQUFHUSxHQUFULENBQWEsQ0FBYixFQUFnQixPQUFoQixFQUF5QkMsTUFBekIsRUFBUDtBQUNIOztBQUNELE1BQUlOLEdBQUcsQ0FBQ0csV0FBSixHQUFrQkMsT0FBbEIsQ0FBMEIsV0FBMUIsSUFBeUMsQ0FBQyxDQUE5QyxFQUFpRDtBQUM3Q0gsSUFBQUEsSUFBSSxHQUFHSixNQUFNLEdBQUdRLEdBQVQsQ0FBYSxDQUFiLEVBQWdCLE1BQWhCLEVBQXdCQyxNQUF4QixFQUFQO0FBQ0g7O0FBQ0Q7QUFDSSxRQUFJQyxPQUFPLEdBQUdQLEdBQUcsQ0FBQ1EsS0FBSixDQUFVLHNQQUFWLENBQWQ7O0FBQ0EsUUFBSUQsT0FBTyxJQUFJLElBQWYsRUFBcUI7QUFDakJOLE1BQUFBLElBQUksR0FBRyxJQUFJQyxJQUFKLENBQVNLLE9BQU8sQ0FBQ0UsUUFBUixFQUFULENBQVA7QUFDSDtBQUNKO0FBQ0Q7QUFDSSxRQUFJRixPQUFPLEdBQUdQLEdBQUcsQ0FBQ1EsS0FBSixDQUFVLGdCQUFWLENBQWQ7O0FBQ0EsUUFBSUQsT0FBTyxJQUFJLElBQVgsSUFBbUIsQ0FBQ0csS0FBSyxDQUFDSCxPQUFPLENBQUNFLFFBQVIsRUFBRCxDQUE3QixFQUFtRDtBQUMvQ1IsTUFBQUEsSUFBSSxHQUFHSixNQUFNLEdBQUdRLEdBQVQsQ0FBYU0sUUFBUSxDQUFDSixPQUFPLENBQUNFLFFBQVIsRUFBRCxDQUFyQixFQUEyQyxLQUEzQyxFQUFrREgsTUFBbEQsRUFBUDtBQUNIO0FBQ0o7QUFDRDtBQUNJLFFBQUlDLE9BQU8sR0FBR1AsR0FBRyxDQUFDUSxLQUFKLENBQVUsaUJBQVYsQ0FBZDs7QUFDQSxRQUFJRCxPQUFPLElBQUksSUFBWCxJQUFtQixDQUFDRyxLQUFLLENBQUNILE9BQU8sQ0FBQ0UsUUFBUixFQUFELENBQTdCLEVBQW1EO0FBQy9DUixNQUFBQSxJQUFJLEdBQUdKLE1BQU0sR0FBR1EsR0FBVCxDQUFhTSxRQUFRLENBQUNKLE9BQU8sQ0FBQ0UsUUFBUixFQUFELENBQXJCLEVBQTJDLE1BQTNDLEVBQW1ESCxNQUFuRCxFQUFQO0FBQ0g7QUFDSjtBQUNEO0FBQ0ksUUFBSUMsT0FBTyxHQUFHUCxHQUFHLENBQUNRLEtBQUosQ0FBVSxrQkFBVixDQUFkOztBQUNBLFFBQUlELE9BQU8sSUFBSSxJQUFYLElBQW1CLENBQUNHLEtBQUssQ0FBQ0MsUUFBUSxDQUFDSixPQUFPLENBQUNFLFFBQVIsRUFBRCxDQUFULENBQTdCLEVBQTZEO0FBQ3pEUixNQUFBQSxJQUFJLEdBQUdKLE1BQU0sR0FBR1EsR0FBVCxDQUFhTSxRQUFRLENBQUNKLE9BQU8sQ0FBQ0UsUUFBUixFQUFELENBQXJCLEVBQTJDLE9BQTNDLEVBQW9ESCxNQUFwRCxFQUFQO0FBQ0g7QUFDSjtBQUNILFNBQU87QUFDTE4sSUFBQUEsR0FESztBQUVMQyxJQUFBQTtBQUZLLEdBQVA7QUFJRDs7QUFDRCxNQUFNVyxTQUFTLEdBQUlDLEtBQUQsSUFBVztBQUMzQixTQUNFO0FBQ0UsSUFBQSxJQUFJLEVBQUMsTUFEUDtBQUVFLElBQUEsS0FBSyxFQUFFO0FBQUVDLE1BQUFBLEtBQUssRUFBRTtBQUFULEtBRlQ7QUFHRSxJQUFBLFFBQVEsRUFBR0MsQ0FBRCxJQUFPO0FBQ2YsVUFBSTtBQUFFQyxRQUFBQTtBQUFGLFVBQVlELENBQUMsQ0FBQ0UsTUFBbEI7QUFFQW5CLE1BQUFBLFNBQVMsQ0FBQ29CLE9BQVYsQ0FBa0JDLFNBQWxCLENBQTRCcEIsV0FBVyxDQUFDaUIsS0FBRCxDQUF2QztBQUNELEtBUEg7QUFRRSxJQUFBLFdBQVcsRUFBRUgsS0FBSyxDQUFDTztBQVJyQixJQURGO0FBWUQsQ0FiRDs7QUFlQSxlQUFlUixTQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZG9tLCBGcmFnbWVudCB9IGZyb20gXCIuLi9tYWN0L2luZGV4LmpzXCI7XHJcblxyXG5pbXBvcnQgbW9tZW50IGZyb20gXCJtb21lbnRcIjtcclxuaW1wb3J0IHsgaW5pdFN0YXRlIH0gZnJvbSBcIi4vaW5kZXhcIjtcclxuLy8gVG9kb0lucHV0IENvbXBvbmVudFxyXG5cclxuZnVuY3Rpb24gcGFyc2VzdHJpbmcoc3RyKSB7XHJcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICBpZiAoc3RyLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcInRvbW9ycm93XCIpID4gLTEpIHtcclxuICAgICAgICBkYXRlID0gbW9tZW50KCkuYWRkKDEsIFwiZGF5c1wiKS50b0RhdGUoKTtcclxuICAgIH1cclxuICAgIGlmIChzdHIudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwibmV4dCB3ZWVrXCIpID4gLTEpIHtcclxuICAgICAgICBkYXRlID0gbW9tZW50KCkuYWRkKDEsIFwid2Vla1wiKS50b0RhdGUoKTtcclxuICAgIH1cclxuICAgIGlmIChzdHIudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwibmV4dCBtb250aFwiKSA+IC0xKSB7XHJcbiAgICAgICAgZGF0ZSA9IG1vbWVudCgpLmFkZCgxLCBcIm1vbnRoXCIpLnRvRGF0ZSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHN0ci50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJuZXh0IHllYXJcIikgPiAtMSkge1xyXG4gICAgICAgIGRhdGUgPSBtb21lbnQoKS5hZGQoMSwgXCJ5ZWFyXCIpLnRvRGF0ZSgpO1xyXG4gICAgfVxyXG4gICAge1xyXG4gICAgICAgIHZhciBkdWVEYXRlID0gc3RyLm1hdGNoKC9cXGIoPzooPzpNb24pfCg/OlR1ZXM/KXwoPzpXZWQoPzpuZXMpPyl8KD86VGh1cj9zPyl8KD86RnJpKXwoPzpTYXQoPzp1cik/KXwoPzpTdW4pKSg/OmRheSk/XFxiWzpcXC0sXT9cXHMqKD86KD86amFufGZlYik/cj8oPzp1YXJ5KT98bWFyKD86Y2gpP3xhcHIoPzppbCk/fG1heXxqdW5lP3xqdWx5P3xhdWcoPzp1c3QpP3xvY3QoPzpvYmVyKT98KD86c2VwdD98bm92fGRlYykoPzplbWJlcik/KVxccytcXGR7MSwyfVxccyosP1xccypcXGR7NH0vaSk7XHJcbiAgICAgICAgaWYgKGR1ZURhdGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoZHVlRGF0ZS50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB7XHJcbiAgICAgICAgdmFyIGR1ZURhdGUgPSBzdHIubWF0Y2goL1xcdysoPz1cXHMrZGF5cykvKTtcclxuICAgICAgICBpZiAoZHVlRGF0ZSAhPSBudWxsICYmICFpc05hTihkdWVEYXRlLnRvU3RyaW5nKCkpKSB7XHJcbiAgICAgICAgICAgIGRhdGUgPSBtb21lbnQoKS5hZGQocGFyc2VJbnQoZHVlRGF0ZS50b1N0cmluZygpKSwgXCJkYXlcIikudG9EYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAge1xyXG4gICAgICAgIHZhciBkdWVEYXRlID0gc3RyLm1hdGNoKC9cXHcrKD89XFxzK3dlZWtzKS8pO1xyXG4gICAgICAgIGlmIChkdWVEYXRlICE9IG51bGwgJiYgIWlzTmFOKGR1ZURhdGUudG9TdHJpbmcoKSkpIHtcclxuICAgICAgICAgICAgZGF0ZSA9IG1vbWVudCgpLmFkZChwYXJzZUludChkdWVEYXRlLnRvU3RyaW5nKCkpLCBcIndlZWtcIikudG9EYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAge1xyXG4gICAgICAgIHZhciBkdWVEYXRlID0gc3RyLm1hdGNoKC9cXHcrKD89XFxzK21vbnRocykvKTtcclxuICAgICAgICBpZiAoZHVlRGF0ZSAhPSBudWxsICYmICFpc05hTihwYXJzZUludChkdWVEYXRlLnRvU3RyaW5nKCkpKSkge1xyXG4gICAgICAgICAgICBkYXRlID0gbW9tZW50KCkuYWRkKHBhcnNlSW50KGR1ZURhdGUudG9TdHJpbmcoKSksIFwibW9udGhcIikudG9EYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gIHJldHVybiB7XHJcbiAgICBzdHIsXHJcbiAgICBkYXRlXHJcbiAgICB9XHJcbn1cclxuY29uc3QgVG9kb0lucHV0ID0gKHByb3BzKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxpbnB1dFxyXG4gICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgIHN0eWxlPXt7IHdpZHRoOiBcIjEwMCVcIiB9fVxyXG4gICAgICBvbkNoYW5nZT17KGUpID0+IHtcclxuICAgICAgICBsZXQgeyB2YWx1ZSB9ID0gZS50YXJnZXQ7XHJcblxyXG4gICAgICAgIGluaXRTdGF0ZS5hY3Rpb25zLkhhbmRsZUFkZChwYXJzZXN0cmluZyh2YWx1ZSkpXHJcbiAgICAgIH19XHJcbiAgICAgIHBsYWNlaG9sZGVyPXtwcm9wcy5wbGFjZWhvbGRlcn1cclxuICAgIC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRvZG9JbnB1dDtcclxuICJdfQ==
//# sourceMappingURL=TodoInput.js.map
