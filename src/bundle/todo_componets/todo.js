import { dom, Fragment, memoize } from "../mact/index.js";
import moment from 'moment';
import { initState, PeopleLookUp } from "./index"; // Todo Component

const Todo = props => {
  function renderTodo() {
    let todo = props.title == null ? "Junk data" : props.title;
    const decoration = props.done ? 'line-through' : 'none';
    return dom("b", null, " ", dom("em", null, dom("div", {
      class: "titleDiv",
      style: {
        'text-decoration': decoration
      },
      onBlur: e => {
        const todo = {
          id: props.id,
          title: e.target.innerHTML
        };
        initState.actions.HandleChange(todo);
      },
      contentEditable: "true",
      id: props.id + "_title"
    }, todo)));
  }

  function Delete_Click(e) {
    if (confirm("Do you want to delete this record ?")) {
      initState.actions.HandleDelete(e.id);
    }
  }

  function Handle_Popup(id) {
    const _id = `#${id}`;
    console.log(_id);
    $(_id).css('width', '100%'); // $(_id).colorbox({
    //   width: "600px", inline: true, href: function () {
    //     return _id;
    //   }, onClosed: function () {
    //     $.colorbox.remove();
    //     $(_id).css('width', '');
    //   }
    // });
    //PeopleLookUp({ name: "Darshan" })

    debugger;
    $(_id).colorbox({
      width: "600px",
      inline: false,
      html: dom(PeopleLookUp, props),
      onClosed: function () {
        $.colorbox.remove();
        $(_id).css('width', '');
      }
    });
  }

  function Done_Click(todo) {
    console.log(todo, "todo");
    initState.actions.HandleStatus(todo);
  }

  let shadow = '2px 5px ' + (props.color || 'black');
  return dom("div", {
    class: "todoItem",
    id: "todoItem" + props.id,
    style: {
      'box-shadow': shadow
    }
  }, props.done === true ? dom("del", null, " ", renderTodo(), " ") : renderTodo(), dom("br", null), dom("span", {
    class: "dateContainer"
  }, moment(props.date).format("Do MMM YYYY")), dom("span", {
    class: "datepicker-toggle"
  }, dom("span", {
    class: "datepicker-toggle-button"
  }), dom("input", {
    type: "date",
    class: "datepicker-input",
    value: new Date(props.date),
    onChange: e => {
      const todo = {
        id: props.id,
        date: e.target.value
      };
      initState.actions.HandleChange(todo);
    }
  })), dom("select", {
    value: props.status,
    onChange: e => {
      const todo = {
        id: props.id,
        status: e.target.value,
        done: e.target.value === "Done"
      };
      Done_Click(todo);
    }
  }, dom("option", {
    value: props.status
  }, props.status), ["Not Started", "Work in Progress", "Stuck", "Done"].filter(x => x != props.status).map(x => dom("option", {
    value: x
  }, x))), dom("button", {
    onClick: e => {
      Delete_Click(props);
    }
  }, "X"), props.desc != null && dom("button", {
    onClick: e => {
      // $("#" + props.id + "div").slideToggle();
      // initState.actions.HandleOpenClose(props);
      Handle_Popup("todoItem" + props.id);
    }
  }, "..."), dom("input", {
    type: "color",
    value: props.color,
    onChange: e => {
      const todo = {
        id: props.id,
        color: e.target.value
      };
      initState.actions.HandleChange(todo);
    }
  }), dom("br", null), props.desc != null && dom("div", {
    class: "desc",
    onBlur: e => {
      var todo = {
        id: props.id,
        desc: e.target.innerHTML,
        isOpen: true
      };
      initState.actions.HandleChange(todo);
    },
    contentEditable: "true",
    id: props.id + "div" // style={{ display: props.isOpen ? "block" : "none" }}

  }, props.desc));
};

export default memoize(Todo);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=todo.js.map
