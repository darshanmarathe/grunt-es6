import { dom, Fragment, memoize } from "../mact/index.js";
import moment from 'moment';
import { initState, PeopleLookUp } from "./index"; // Todo Component

const Todo = props => {
  function renderTodo() {
    let todo = props.title == null ? "Junk data" : props.title;
    const decoration = props.done ? 'line-through' : 'none';
    return dom('Fragment', null, dom("div", {
      class: "titleDiv",
      style: {
        'text-decoration': decoration
      },
      onBlur: e => {
        const todo = {
          id: props.id,
          title: e.target.innerHTML
        };
        initState.actions.HandleChange(todo);
      },
      contentEditable: "true",
      id: props.id + "_title"
    }, todo), dom("div", {
      class: "controlsContainer"
    }, dom("select", {
      value: props.status,
      style: {
        marginTop: '5px'
      },
      onChange: e => {
        const todo = {
          id: props.id,
          status: e.target.value,
          done: e.target.value === "Done"
        };
        Done_Click(todo);
      }
    }, dom("option", {
      value: props.status
    }, props.status), initState.statuses.filter(x => x != props.status).map(x => dom("option", {
      value: x
    }, x))), dom("button", {
      onClick: e => {
        Delete_Click(props);
      }
    }, "X"), dom("button", {
      onClick: e => {
        // $("#" + props.id + "div").slideToggle();
        // initState.actions.HandleOpenClose(props);
        Handle_Popup("todoItem" + props.id);
      }
    }, "..."), dom("span", {
      class: "dateContainer"
    }, moment(props.date).format("Do MMM YYYY")), dom("input", {
      type: "color",
      value: props.color,
      onChange: e => {
        const todo = {
          id: props.id,
          color: e.target.value
        };
        initState.actions.HandleChange(todo);
      }
    }), dom("span", {
      class: "datepicker-toggle"
    }, dom("span", {
      class: "datepicker-toggle-button"
    }), dom("input", {
      type: "date",
      class: "datepicker-input",
      value: new Date(props.date),
      onChange: e => {
        const todo = {
          id: props.id,
          date: e.target.value
        };
        initState.actions.HandleChange(todo);
      }
    })), dom("button", {
      dangerouslySetInnerHTML: {
        __html: `${props.isOpen ? '&#8593;' : '&#8595;'}`
      },
      style: {
        float: 'right',
        marginTop: '5px',
        fontWeight: 'bold'
      },
      onClick: e => {
        console.log('#' + "todo_" + props.id, $('#' + "todo_" + props.id).length);
        $('#' + "todo_" + props.id).toggle(); //        setTimeout(() => {

        initState.actions.HandleOpenClose(props); //      }, 3100);
      }
    })));
  }

  function Delete_Click(e) {
    if (confirm("Do you want to delete this record ?")) {
      initState.actions.HandleDelete(e.id);
    }
  }

  function Handle_Popup(id) {
    const _id = `#${id}`;
    console.log(_id);
    $(_id).colorbox({
      width: "600px",
      inline: false,
      html: dom(PeopleLookUp, props),
      onClosed: function () {
        $.colorbox.remove();
        $(_id).css('width', '');
      }
    });
  }

  function Done_Click(todo) {
    initState.actions.HandleStatus(todo);
  }

  let shadow = '5px 1px ' + (props.color || 'black'); //style={{ 'box-shadow': shadow }}

  return dom("div", {
    class: "todoItem",
    style: {
      boxShadow: shadow
    },
    id: "todoItem" + props.id,
    onMouseOver: e => {//e.target.style.boxShadow = shadow
    },
    onMouseOut: e => {//e.target.style.boxShadow = '';
    }
  }, props.done === true ? dom("del", null, " ", renderTodo(), " ") : renderTodo(), dom("div", {
    id: "todo_" + props.id,
    style: {
      display: props.isOpen ? "block" : "none"
    }
  }, dom("br", null), dom("br", null), dom("div", {
    class: "desc",
    onBlur: e => {
      var todo = {
        id: props.id,
        desc: e.target.innerHTML,
        isOpen: true
      };
      initState.actions.HandleChange(todo);
    },
    contentEditable: "true",
    id: props.id + "div"
  }, props.desc)));
};

export default memoize(Todo);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=todo.js.map
